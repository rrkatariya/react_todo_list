{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","list_items","items","map","item","className","key","type","id","value","text","onChange","e","updateItem","target","onClick","deleteItem","App","handleInput","setState","currentItem","Date","now","addItem","preventDefault","newItem","state","console","log","newItems","filteredItem","filter","val","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAEe,SAASA,EAAUC,GAG9B,IACMC,EADQD,EAAME,MACKC,KACrB,SAAAC,GACI,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACI,2BACIC,KAAK,OACLC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GAAD,OAAOZ,EAAMa,WAAWD,EAAEE,OAAOL,MAAOL,EAAKE,QAC3D,8BACI,4BAAQS,QAAU,kBAAMf,EAAMgB,WAAWZ,EAAKE,OAA9C,WAOxB,OACI,6BACI,6BAAML,I,ICtBGgB,E,YACnB,WAAYjB,GAAO,IAAD,8BAChB,4CAAMA,KAURkB,YAAc,SAACN,GACb,EAAKO,SAAS,CACZC,YAAY,CACVV,KAAKE,EAAEE,OAAOL,MACdH,IAAIe,KAAKC,UAfG,EAoBlBC,QAAU,SAACX,GACTA,EAAEY,iBACF,IAAMC,EAAU,EAAKC,MAAMN,YAE3B,GADAO,QAAQC,IAAIH,GACQ,KAAjBA,EAAQf,KAAY,CACrB,IAAMmB,EAAQ,sBAAO,EAAKH,MAAMxB,OAAlB,CAAyBuB,IACvC,EAAKN,SAAS,CACZjB,MAAM2B,EACNT,YAAY,CACVV,KAAK,GACLJ,IAAI,QA9BM,EAoClBU,WAAa,SAACV,GACZ,IAAMwB,EAAe,EAAKJ,MAAMxB,MAAM6B,QAAO,SAAA3B,GAAI,OAAIA,EAAKE,MAAQA,KAClE,EAAKa,SAAS,CAACjB,MAAM4B,KAtCL,EAyClBjB,WAAa,SAACmB,EAAK1B,GACjB,IAAMJ,EAAQ,EAAKwB,MAAMxB,MACzBA,EAAMC,KAAK,SAAAC,GACNA,EAAKE,MAAQA,IACdF,EAAKM,KAAOsB,MAIhB,EAAKb,SAAS,CACZjB,MAAMA,KAhDR,EAAKwB,MAAQ,CACXxB,MAAM,GACNkB,YAAY,CACVV,KAAK,GACLJ,IAAI,KANQ,E,sEAuDhB,OACE,yBAAKD,UAAU,OACb,gCACE,wBAAIA,UAAU,UAAd,cACA,0BAAMG,GAAG,cACP,2BAAOD,KAAK,OAAOE,MAAOwB,KAAKP,MAAMN,YAAYV,KAAMwB,YAAY,WAAWvB,SAAUsB,KAAKf,cAC7F,4BAAQX,KAAK,SAASQ,QAASkB,KAAKV,SAApC,MAEF,kBAAC,EAAD,CACErB,MAAO+B,KAAKP,MAAMxB,MAClBc,WAAYiB,KAAKjB,WACjBH,WAAYoB,KAAKpB,mB,GAnEIsB,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.282d9d75.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItems.css';\r\nexport default function ListItems(props) {\r\n    //console.log(props);\r\n    \r\n    const items = props.items;\r\n    const list_items = items.map(\r\n        item => {\r\n            return(\r\n                <div className=\"list\" key={item.key}>\r\n                    <p>\r\n                        <input \r\n                            type=\"text\" \r\n                            id={item.key} \r\n                            value={item.text} \r\n                            onChange={(e) => props.updateItem(e.target.value, item.key)}/>\r\n                        <span>\r\n                            <button onClick={ () => props.deleteItem(item.key)}>X</button>\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            )\r\n        }\r\n    )\r\n    return (\r\n        <div>\r\n            <div>{list_items}</div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport ListItems from './ListItems';\n\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        text:'',\n        key:''\n      }\n    }\n  }\n\n  handleInput = (e) => {\n    this.setState({\n      currentItem:{\n        text:e.target.value,\n        key:Date.now()\n      }\n    });\n  }\n\n  addItem = (e) => {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    console.log(newItem);\n    if(newItem.text !== \"\"){\n      const newItems = [...this.state.items, newItem];\n      this.setState({\n        items:newItems,\n        currentItem:{\n          text:'',\n          key:''\n        }\n      });\n    }  \n  }\n\n  deleteItem = (key) => {\n    const filteredItem = this.state.items.filter(item => item.key !== key);\n    this.setState({items:filteredItem});\n  }\n\n  updateItem = (val, key) => {\n    const items = this.state.items;\n    items.map( item => {\n      if(item.key === key){\n        item.text = val;\n      }\n    })\n\n    this.setState({\n      items:items,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 className=\"H1_cls\">To-Do List</h1>\n          <form id=\"to-do-form\">\n            <input type=\"text\" value={this.state.currentItem.text} placeholder=\"Add Task\" onChange={this.handleInput}/>\n            <button type=\"submit\" onClick={this.addItem}>+</button>\n          </form>\n          <ListItems \n            items={this.state.items}\n            deleteItem={this.deleteItem}\n            updateItem={this.updateItem}\n          />\n        </header>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}